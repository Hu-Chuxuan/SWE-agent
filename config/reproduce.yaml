system_template: |-
  SETTING: You are working on reproducing a social science paper, and you're working directly in the command line with a special interface.

  The special interface consists of a file editor that shows you {WINDOW} lines of a file at a time.
  In addition to typical bash commands, you can also use the following commands to help you navigate and edit files.

  COMMANDS:
  {command_docs}

  Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.
  If you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.

  RESPONSE FORMAT:
  Your shell prompt is formatted as follows:
  (Open file: <path>) <cwd> $

  You need to format your output using two fields; discussion and command.
  Your output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:
  DISCUSSION
  First I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.
  ```
  ls -a
  ```

  You should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.
  If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command.
  You're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.
  However, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.
instance_template: |-
  We're currently evaluating the reproducibility of a social science paper. 
  Specifically, 
  1. we rate the reproducibility of the paper at a scale of from 1 to 4, where 
      1: major findings in the paper are irreproducible,
      2: there are minor inconsistencies and/or errors in the provided data and/or code,
      3: there are rounding errors or equivalent issues in the major findings,
      4: major findings of the paper are fully reproducible.
  2. we decide the score according to the reproduction results of the main findings of the paper, which include these figures: {figures}, tables: {tables}, and text claims: highlighted in the paper pdf, if any.

  INSTRUCTIONS:
  Now, you're going to generate the reproducibility score on your own. You are already at a folder containing both the paper PDF and the replication package.
  You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.
  Remember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command.
  When you have the reproducibility score ready, you should save your answer to a file named 'reproducibility_score.json' in the directory you started in, which contains a single item with key being "reproducibility_score" and value being the score in integer, and then submit.
  Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.

  IMPORTANT RULE:  You have to first generate a score within 30 commands. You can always update that score until whenever you want.
  You have already executed {command_number} commands.

  NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!

  IMPORTANT TIPS:

  1. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!

  2. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.

  3. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.

  4. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.


  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_template: |-
  {observation}
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_no_output_template: |-
  Your command ran successfully and did not produce any output.
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
demonstration_template: |
  Here is a demonstration of how to correctly use the interface to resolve a github issue.
  You, of course, should not follow exactly what is done in the demonstration. e.g., the demo closes with a submit command, but you should close with a reproducibility score.
  --- DEMONSTRATION ---
  {demonstration}
  --- END OF DEMONSTRATION ---
state_command:
  name: state
  code: |
    state() {
      local working_dir="$PWD";
      if [ -z "$CURRENT_FILE" ]; then
          echo '{"open_file": "n/a", "working_dir": "'$working_dir'"}';
      else
          echo '{"open_file": "'$(realpath "$CURRENT_FILE")'", "working_dir": "'$working_dir'"}';
      fi
    };
parse_function: ThoughtActionParser
env_variables:
  WINDOW: 100
  OVERLAP: 2
  CURRENT_LINE: 0
  CURRENT_FILE: ""
  SEARCH_RESULTS: ()
  SEARCH_FILES: ()
  SEARCH_INDEX: 0
command_files:
  - config/commands/defaults.sh
  - config/commands/search.sh
  - config/commands/edit_linting.sh
  - config/commands/_split_string.py
parse_command: ParseCommandDetailed
history_processor: Last5Observations
demonstrations:
  - trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__default_sys-env_window100__t-0.20__p-0.95__c-2.00__install-1/marshmallow-code__marshmallow-1867.traj
